name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

        # 캐시 복원: Gradle User Home
    - name: Restore Gradle Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-cache-${{ runner.os }}-

    # Create application-prod.yml
    - uses: actions/checkout@v3
    - run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml

    - uses: actions/checkout@v3
    - name: Create docker-compose.prod.yml
      run: echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > ./docker-compose.prod.yml


      # Java 21 세팅
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    # Spring Boot 애플리케이션 빌드
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      uses: gradle/gradle-build-action@v3
      with:
        arguments: clean bootJar


    # Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/2025_unithon_team_4_be-backend .

    # DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/2025_unithon_team_4_be-backend

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Create docker-compose.yml
        run: echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > docker-compose.prod.yml

      # 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/2025_unithon_team_4_be-backend

      # 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker ps -q | xargs -r sudo docker stop

      # 모든 컨테이너 삭제
      - name: remove all container
        run: sudo docker ps -aq | xargs -r sudo docker rm -f

      # app-network 가 없으면 생성
      - name: Ensure Docker Network Exists
        run: sudo docker network inspect app-network >/dev/null 2>&1 || sudo docker network create app-network

      # docker-compose 실행
      - name: Run with docker-compose
        run: sudo docker compose -f docker-compose.prod.yml up -d --build

      # 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -af
