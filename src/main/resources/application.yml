# dev

server:
  port: 8080

app:
  domain: ${APP_DOMAIN}
  origin: ${APP_ORIGIN}

spring:
  application:
    name: backend
  config:
    import: optional:file:.env[.properties]
  docker:
    compose:
      file: docker-compose.dev.yaml
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 20MB
  jpa:
    properties:
      hibernate.hibernate.show_sql: true
      hibernate.hibernate.format_sql: true
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.MySQLDialect
  datasource:
    url: ${MYSQL_URL}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org:
        quartz:
          scheduler:
            instanceName: simpleScheduler
            instancedId: AUTO
          jobstore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            useProperties: false
            tablePrefix: QRTZ_
            isClustered: false # 클러스터링할 거면 true
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 5
            threadPriority: 5
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_ID}
    password: ${EMAIL_PW}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true

springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui.path: /swagger-ui/index.html

jwt:
  expiration: 86400000
  secret: ${JWT_SECRET}

logging:
  level:
    root: INFO

tourapi:
  service-key: ${TOURAPI_SERVICE_KEY}

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET}
    stack:
      auto: false
    region:
      static: ${AWS_S3_STATIC}
    credentials:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}

default:
  profile:
    image: ${DEFAULT_PROFILE_IMAGE}